require('dotenv').config();

const fs = require('fs');
const colors = require('colors');

const productJson = require('./src/data/product.json');

const TelegramBot = require('node-telegram-bot-api');
const token = process.env.BOT_API_KEY;

const bot = new TelegramBot(token, { polling: true });

console.log('Started TelegramBot');

const getCategoryInlineKeyboard = () => {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏', callback_data: 'view_categories' }]
            ]
        }
    };
};

const getNumEmailInlineKeyboard = () => {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏', callback_data: 'get_number_email' }]
            ]
        }
    };
};

const getReturnInlineKeyboard = () => {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤', callback_data: 'get_return' }]
            ]
        }
    };
};

const getCategoryKeyboard = () => {
    return {
        reply_markup: {
            keyboard: [
                ['üîß–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏üèóÔ∏è', 'üè∞–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏üéÆ'],
                ['üìö–î–∏—Ç—è—á—ñ –∫–Ω–∏–≥–∏üìó', 'üß∏–ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏üê∞'],
                ['üß©–Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏üé≤', 'üö¥–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏ü§æ‚Äç‚ôÄÔ∏è'],
                ['üß†–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏üé®'],
                ['üõçÔ∏è–ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏üõçÔ∏è'],
                ['üõí–ú—ñ–π –∫–æ—à–∏–∫ —Ç–æ–≤–∞—Ä—ñ–≤üõí']
            ],
            resize_keyboard: true,
        },
    };
};


const funConstructorAvailabity = (index) => {
    return productJson.constructors[index].availability ? '‚úÖ–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' : '‚ùå–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'
};

const ifelConstructorRatin = (rating) => {
    let stars = ''
    for (let i = 0; i < rating; i++) {
        stars += '‚≠êÔ∏è'
    }
    return stars
};

const categories = [
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1',
        products: productJson.constructors.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2',
        products: productJson.playSets.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3',
        products: productJson.books.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4',
        products: productJson.softToys.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 5',
        products: productJson.gamesAndPuzzles.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 6',
        products: productJson.activeGames.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 7',
        products: productJson.developmentalGames.slice(0, 5)
    },
    {
        name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 8',
        products: productJson.accessoriesAdditionalProducts.slice(0, 5)
    },
];

const products = [];

for (const category of categories) {
    for (let i = 0; i < category.products.length; i++) {
        const product = category.products[i];

        products.push({
            name: product.name,
            description: product.description,
            additionalProperties: product.additionalProperties,
            price: product.price,
            availability: funConstructorAvailabity(i),
            manufacturer: product.manufacturer,
            size: product.size,
            weight: product.weight,
            kidsLike: product.kidsLike,
            rating: ifelConstructorRatin(product.rating),
            quantity: 0,
            category: category.name
        });
    }
};

let cart = [];

function getProductButtons(product) {
    return [
        [
            { text: '‚ûñ', callback_data: `decrement_${product.name}` },
            { text: product.quantity, callback_data: 'quantity_placeholder' },
            { text: '‚ûï', callback_data: `increment_${product.name}` }
        ],
        [{ text: '–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞', callback_data: `add_to_cart_${product.name}` }]
    ];
};

bot.setMyCommands([
    { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç' },
    { command: '/my_cart', description: '–ú—ñ–π –∫–æ—à–∏–∫ —Ç–æ–≤–∞—Ä—ñ–≤' },
]);

const start = () => {

    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;

        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

        const linkToMyWebsite = '<a href="https://www.google.com.ua">–°–Æ–î–ò</a>'
        const welcomeText = '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ <b>üåàRainbow game worldüß∏</b> - —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–∏—Ç—è—á–∏—Ö —ñ–≥—Ä–∞—à–æ–∫!\n\n' +
            'üåü–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —è–∫—ñ—Å–Ω–∏—Ö —ñ –∑–∞—Ö–æ–ø–ª–∏–≤–∏—Ö —ñ–≥—Ä–∞—à–æ–∫ –¥–ª—è –¥—ñ—Ç–µ–π —Ä—ñ–∑–Ω–æ–≥–æ –≤—ñ–∫—É. –ù–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –≤–∏–±–æ—Ä–æ–º —ñ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüåü\n\n' +
            '‚ú®–ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, —ñ –Ω–∞—à –±–æ—Ç –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏, —Ü—ñ–Ω–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏‚ú®\n\n' +
            '<b>–ú–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É üåàRainbow game worldüß∏</b>\n\n' +
            `<i>–¢–∞–∫–æ–∂, —è–∫—â–æ –≤–∏ –≤—ñ–¥–¥–∞—î—Ç–µ –ø–µ—Ä–µ–≤–∞–≥—É —Å–ø–æ—Å–æ–±—É –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ </i>üåà${linkToMyWebsite}üß∏`

        await bot.sendSticker(chatId, './src/img/stickers-bear/admire.webp')
        await bot.sendMessage(chatId, welcomeText, { ...getCategoryInlineKeyboard(), parse_mode: 'HTML' });
    });

    bot.onText(/\/my_cart/, async (msg) => {
        const chatId = msg.chat.id;

        let cartText = 'üåà<b>–û—Å—å –≤–∞—à –∫–æ—à–∏–∫</b>üß∏:\n\n';
        if (cart.length > 0) {
            for (const item of cart) {
                cartText += `${item.name} - ${item.price} –≥—Ä–Ω\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity} —à—Ç.\n\n`;
            }
            await bot.sendMessage(chatId, cartText, { ...getNumEmailInlineKeyboard(), parse_mode: 'HTML' });
        } else {
            await bot.sendMessage(chatId, `${cartText} –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π`, { parse_mode: 'HTML' });
        }

    });

    let isWaitingForContacts = false;

    bot.on('callback_query', (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;

        if (callbackQuery.data === 'view_categories') {
            const productsText = 'üåà<b>–ß—É–¥–æ–≤–æ, –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å</b>üß∏:\n\n' +
                'üîß<b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏</b>üèóÔ∏è - –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±–∏—Ä–∞—Ç–∏ —ñ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –º–æ–¥–µ–ª—ñ —Ç–∞ —Ñ–æ—Ä–º–∏.\n\n' +
                'üè∞<b>–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏</b>üéÆ - –ó–∞—Ö–æ–ø–ª—é—é—á—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏ –¥–ª—è –≤–µ—Å–µ–ª–∏—Ö —ñ–≥–æ—Ä —ñ –ø—Ä–∏–≥–æ–¥.\n\n' +
                'üìö<b>–î–∏—Ç—è—á—ñ –∫–Ω–∏–∂–∫–∏</b>üìó - –ß—É–¥–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Ç–∞—á—ñ–≤.\n\n' +
                'üß∏<b>–ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏</b>üê∞ - –ü—Ä–∏—î–º–Ω—ñ –Ω–∞ –¥–æ—Ç–∏–∫ –ø–ª—é—à–µ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –æ–±—ñ–π–º–∞—à–æ–∫ —Ç–∞ —ñ–≥–æ—Ä.\n\n' +
                'üß©<b>–Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏</b>üé≤ - –†–æ–∑—É–º–æ–≤—ñ —Ç–∞ –ª–æ–≥—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.\n\n' +
                'üö¥<b>–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏</b>ü§æ‚Äç‚ôÄÔ∏è - –ï–Ω–µ—Ä–≥—ñ–π–Ω—ñ —ñ–≥—Ä–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É —Ç–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –∑–∞–Ω—è—Ç—å.\n\n' +
                'üß†<b>–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏</b>üé® - –Ü–≥—Ä–∏, —â–æ —Å–ø—Ä–∏—è—é—Ç—å —Ä–æ–∑–≤–∏—Ç–∫—É –ª–æ–≥—ñ–∫–∏, —É—è–≤–∏ —Ç–∞ —Ç–≤–æ—Ä—á–∏—Ö –Ω–∞–≤–∏—á–æ–∫.\n\n' +
                'üõçÔ∏è<b>–ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏</b>üõçÔ∏è - –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ –¥–ª—è —â–µ –±—ñ–ª—å—à–æ–≥–æ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–≥–æ—Ä —ñ —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ.\n\n'

            bot.sendMessage(chatId, productsText, { ...getCategoryKeyboard(), parse_mode: 'HTML' });
            bot.answerCallbackQuery(callbackQuery.id);
        } else if (callbackQuery.data.startsWith('view_category_')) {
            const categoryId = callbackQuery.data.split('_')[2];
            const categoryProducts = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`);

            for (const product of categoryProducts) {
                const text = `${product.name}, ${product.price}`;
                const buttons = getProductButtons(product);

                bot.sendMessage(chatId, text, { reply_markup: { inline_keyboard: buttons }, reply_to_message_id: messageId });
            }
        } else if (callbackQuery.data.startsWith('increment_')) {
            const productName = callbackQuery.data.split('_')[1];
            const product = products.find(p => p.name === productName);

            if (product) {
                product.quantity += 1;
                const buttons = getProductButtons(product);

                bot.editMessageReplyMarkup({ inline_keyboard: buttons }, { chat_id: chatId, message_id: messageId });
                bot.answerCallbackQuery(callbackQuery.id);
            }
        } else if (callbackQuery.data.startsWith('decrement_')) {
            const productName = callbackQuery.data.split('_')[1];
            const product = products.find(p => p.name === productName);

            if (product && product.quantity > 0) {
                product.quantity -= 1;
                const buttons = getProductButtons(product);

                bot.editMessageReplyMarkup({ inline_keyboard: buttons }, { chat_id: chatId, message_id: messageId });
                bot.answerCallbackQuery(callbackQuery.id);
            }
        } else if (callbackQuery.data.startsWith('add_to_cart_')) {
            const productName = callbackQuery.data.split('_')[3];
            const product = products.find(p => p.name === productName);

            if (product && product.quantity > 0) {
                const existingCartItem = cart.find(item => item.name === product.name);

                if (existingCartItem) {
                    existingCartItem.quantity += product.quantity;
                } else {
                    const cartItem = {
                        name: product.name,
                        price: product.price,
                        quantity: product.quantity
                    };

                    cart.push(cartItem);
                }

                product.quantity = 0;

                bot.sendMessage(chatId, `–¢–æ–≤–∞—Ä üåà<b>${product.name}</b>üß∏ –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ—à–∏–∫–∞.`, { parse_mode: 'HTML' });
                bot.answerCallbackQuery(callbackQuery.id);

            }
        } else if (callbackQuery.data === 'get_number_email') {
            const productsText = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à ‚úâÔ∏è<b>Email</b>‚úâÔ∏è –∞–±–æ üìû<b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>üìû\n\n' +
                'üåà<b>–ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –≤–∞—à–æ—ó –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b>üß∏\n\n' +
                '<i>–¢–µ, —â–æ –≤–∏ –Ω–∞–ø–∏—à–µ—Ç–µ, –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞—à–æ–º—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É</i>'

            isWaitingForContacts = true;
            bot.sendMessage(chatId, productsText, { parse_mode: 'HTML' });
            bot.answerCallbackQuery(callbackQuery.id);

        } else if (callbackQuery.data === 'get_return') {

            const productsText = 'üåà<b>–ß—É–¥–æ–≤–æ, –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å</b>üß∏:\n\n' +
                'üîß<b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏</b>üèóÔ∏è - –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±–∏—Ä–∞—Ç–∏ —ñ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –º–æ–¥–µ–ª—ñ —Ç–∞ —Ñ–æ—Ä–º–∏.\n\n' +
                'üè∞<b>–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏</b>üéÆ - –ó–∞—Ö–æ–ø–ª—é—é—á—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏ –¥–ª—è –≤–µ—Å–µ–ª–∏—Ö —ñ–≥–æ—Ä —ñ –ø—Ä–∏–≥–æ–¥.\n\n' +
                'üìö<b>–î–∏—Ç—è—á—ñ –∫–Ω–∏–∂–∫–∏</b>üìó - –ß—É–¥–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Ç–∞—á—ñ–≤.\n\n' +
                'üß∏<b>–ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏</b>üê∞ - –ü—Ä–∏—î–º–Ω—ñ –Ω–∞ –¥–æ—Ç–∏–∫ –ø–ª—é—à–µ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –æ–±—ñ–π–º–∞—à–æ–∫ —Ç–∞ —ñ–≥–æ—Ä.\n\n' +
                'üß©<b>–Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏</b>üé≤ - –†–æ–∑—É–º–æ–≤—ñ —Ç–∞ –ª–æ–≥—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.\n\n' +
                'üö¥<b>–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏</b>ü§æ‚Äç‚ôÄÔ∏è - –ï–Ω–µ—Ä–≥—ñ–π–Ω—ñ —ñ–≥—Ä–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É —Ç–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –∑–∞–Ω—è—Ç—å.\n\n' +
                'üß†<b>–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏</b>üé® - –Ü–≥—Ä–∏, —â–æ —Å–ø—Ä–∏—è—é—Ç—å —Ä–æ–∑–≤–∏—Ç–∫—É –ª–æ–≥—ñ–∫–∏, —É—è–≤–∏ —Ç–∞ —Ç–≤–æ—Ä—á–∏—Ö –Ω–∞–≤–∏—á–æ–∫.\n\n' +
                'üõçÔ∏è<b>–ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏</b>üõçÔ∏è - –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ –¥–ª—è —â–µ –±—ñ–ª—å—à–æ–≥–æ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–≥–æ—Ä —ñ —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ.\n\n'

            bot.sendMessage(chatId, productsText, { ...getCategoryKeyboard(), parse_mode: 'HTML' });
            bot.answerCallbackQuery(callbackQuery.id);
        }
    });

    bot.on('message', async (msg) => {
        const chatId = msg.chat.id

        switch (msg.text) {

            case 'üîß–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏üèóÔ∏è':
                const chatId1 = msg.chat.id;
                const categoryId1 = 1;
                const categoryProducts1 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId1}`);

                const arrConstructorText = 'üîß<b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏üèóÔ∏è —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'

                const arrConstructorImg = [
                    './src/img/product/constructors/LEGO-LEGOClassicLargeCreativeBrickBox.jpg',
                    './src/img/product/constructors/Playmobil-PlaymobilCityLifeModernHouse.jpg',
                    './src/img/product/constructors/MegaBloks-MegaBloksFirstBuildersBigBuildingBag.jpg',
                    './src/img/product/constructors/KNEX-KNEXThrillRidesBionicBlastRollerCoasterBuildingSet.jpg',
                    './src/img/product/constructors/Magformers-MagformersRainbowMagneticBuildingBlocks.jpg',
                ]
                const arrConstructorImgBox = [
                    './src/img/product/constructors/LEGO-LEGOClassicLargeCreativeBrickBox2.jpg',
                    './src/img/product/constructors/Playmobil-PlaymobilCityLifeModernHouse2.jpg',
                    './src/img/product/constructors/MegaBloks-MegaBloksFirstBuildersBigBuildingBag2.jpg',
                    './src/img/product/constructors/KNEX-KNEXThrillRidesBionicBlastRollerCoasterBuildingSet2.jpg',
                    './src/img/product/constructors/Magformers-MagformersRainbowMagneticBuildingBlocks2.jpg',
                ]

                await bot.sendMessage(chatId1, arrConstructorText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts1.length; i++) {

                    const product1 = categoryProducts1[i];

                    const text1 = `üåà<b>${product1.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product1.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product1.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product1.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product1.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product1.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product1.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product1.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product1.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product1.rating;

                    const buttons1 = getProductButtons(product1);

                    const imgIndex = i % arrConstructorImg.length;
                    const imgBoxIndex = i % arrConstructorImgBox.length;

                    await bot.sendMediaGroup(chatId1, [
                        { type: 'photo', media: arrConstructorImg[imgIndex] },
                        { type: 'photo', media: arrConstructorImgBox[imgBoxIndex] },
                    ], { reply_markup: { inline_keyboard: buttons1 } });

                    await bot.sendMessage(chatId1, text1, { reply_markup: { inline_keyboard: buttons1 }, parse_mode: 'HTML' });
                }

                break;

            case 'üè∞–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏üéÆ':
                const chatId2 = msg.chat.id;
                const categoryId2 = 2;
                const categoryProducts2 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId2}`);

                const arrPlaySetsText = 'üè∞<b>–Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏üéÆ —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –Ü–≥—Ä–æ–≤—ñ –Ω–∞–±–æ—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrPlaySetsImg = [
                    './src/img/product/playSets/Step2-KidsPlayKitchenSet.jpg',
                    './src/img/product/playSets/Melissa&Doug-DoctorPretendPlaySet.jpg',
                    './src/img/product/playSets/LittleTikes-ToyGroceryStoreSet.jpg',
                    './src/img/product/playSets/LEGO-ConstructionToySet.jpg',
                    './src/img/product/playSets/Playmobil-PirateAdventurePlayset.jpg',
                ]
                const arrPlaySetsImgBox = [
                    './src/img/product/playSets/Step2-KidsPlayKitchenSet2.jpg',
                    './src/img/product/playSets/Melissa&Doug-DoctorPretendPlaySet2.jpg',
                    './src/img/product/playSets/LittleTikes-ToyGroceryStoreSet2.jpg',
                    './src/img/product/playSets/LEGO-ConstructionToySet2.jpg',
                    './src/img/product/playSets/Playmobil-PirateAdventurePlayset2.jpg',
                ]

                await bot.sendMessage(chatId2, arrPlaySetsText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts2.length; i++) {

                    const product2 = categoryProducts2[i];

                    const text2 = `üåà<b>${product2.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product2.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product2.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product2.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product2.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product2.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product2.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product2.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product2.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product2.rating;

                    const buttons2 = getProductButtons(product2);

                    const imgIndex = i % arrPlaySetsImg.length;
                    const imgBoxIndex = i % arrPlaySetsImgBox.length;

                    await bot.sendMediaGroup(chatId2, [
                        { type: 'photo', media: arrPlaySetsImg[imgIndex] },
                        { type: 'photo', media: arrPlaySetsImgBox[imgBoxIndex] },
                    ], { reply_markup: { inline_keyboard: buttons2 } });

                    await bot.sendMessage(chatId2, text2, { reply_markup: { inline_keyboard: buttons2 }, parse_mode: 'HTML' });
                }

                break;

            case 'üìö–î–∏—Ç—è—á—ñ –∫–Ω–∏–≥–∏üìó':
                const chatId3 = msg.chat.id;
                const categoryId3 = 3;
                const categoryProducts3 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId3}`);

                const arrBooksText = 'üìö<b>–î–∏—Ç—è—á—ñ –∫–Ω–∏–≥–∏üìó —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –î–∏—Ç—è—á—ñ –∫–Ω–∏–≥–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrBooksImg = [
                    './src/img/product/books/Ababagakamaga-HarryPotterAndThePhilosophersStone.jpg',
                    './src/img/product/books/Kredo-Teremok.jpg',
                    './src/img/product/books/Ababagakamaga-CharlieAndTheChocolateFactory.jpg',
                    './src/img/product/books/Ranok-PinocchiosAdventures.jpg',
                    './src/img/product/books/Folio-TheLittlePrince.png',
                ]

                await bot.sendMessage(chatId3, arrBooksText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts3.length; i++) {

                    const product3 = categoryProducts3[i];

                    const text3 = `üåà<b>${product3.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product3.description + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product3.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product3.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product3.manufacturer + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product3.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product3.rating;

                    const buttons3 = getProductButtons(product3);

                    const imgIndex = i % arrBooksImg.length;

                    await bot.sendMediaGroup(chatId3, [
                        { type: 'photo', media: arrBooksImg[imgIndex] },
                    ], { reply_markup: { inline_keyboard: buttons3 } });

                    await bot.sendMessage(chatId3, text3, { reply_markup: { inline_keyboard: buttons3 }, parse_mode: 'HTML' });
                }

                break;

            case 'üß∏–ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏üê∞':
                const chatId4 = msg.chat.id;
                const categoryId4 = 4;
                const categoryProducts4 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId4}`);

                const arrSoftToysText = 'üß∏<b>–ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏üê∞ —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –ú\'—è–∫—ñ —ñ–≥—Ä–∞—à–∫–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrSoftToysImg = [
                    './src/img/product/softToys/AURORA-TeddyBear.jpg',
                    './src/img/product/softToys/HelloKitty-HelloKittyPlushToy.jpg',
                    './src/img/product/softToys/Disney-DisneysMickeyMousePlush.jpg',
                    './src/img/product/softToys/TY-PawPatrolPlushToy.jpg',
                    './src/img/product/softToys/Disney-ElsaPlushDoll.jpg',
                ]

                await bot.sendMessage(chatId4, arrSoftToysText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts4.length; i++) {

                    const product4 = categoryProducts4[i];

                    const text4 = `üåà<b>${product4.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product4.description + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product4.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product4.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product4.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product4.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product4.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product4.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product4.rating;

                    const buttons4 = getProductButtons(product4);

                    const imgIndex = i % arrSoftToysImg.length;

                    await bot.sendMediaGroup(chatId4, [
                        { type: 'photo', media: arrSoftToysImg[imgIndex] },
                    ], { reply_markup: { inline_keyboard: buttons4 } });

                    await bot.sendMessage(chatId4, text4, { reply_markup: { inline_keyboard: buttons4 }, parse_mode: 'HTML' });
                }

                break;

            case 'üß©–Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏üé≤':
                const chatId5 = msg.chat.id;
                const categoryId5 = 5;
                const categoryProducts5 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId5}`);

                const arrGamesAndPuzzlesText = 'üß©<b>–Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏üé≤ —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –Ü–≥—Ä–∏ —Ç–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrGamesAndPuzzlesImg = [
                    './src/img/product/gamesAndPuzzles/Mattel-UNO.jpg',
                    './src/img/product/gamesAndPuzzles/Rubiks-RubiksCube3x3.jpg',
                    './src/img/product/gamesAndPuzzles/DaysOfWonder-TicketToRideFirstJourney.jpg',
                    './src/img/product/gamesAndPuzzles/Hasbro-MonopolyJunior.jpg',
                    './src/img/product/gamesAndPuzzles/LEGO-LEGOFriendsCafeHeartlakeCity.jpg',
                ]
                const arrGamesAndPuzzlesImgBox = [
                    './src/img/product/gamesAndPuzzles/Mattel-UNO2.jpg',
                    './src/img/product/gamesAndPuzzles/Rubiks-RubiksCube3x32.jpg',
                    './src/img/product/gamesAndPuzzles/DaysOfWonder-TicketToRideFirstJourney2.jpg',
                    './src/img/product/gamesAndPuzzles/Hasbro-MonopolyJunior2.jpg',
                    './src/img/product/gamesAndPuzzles/LEGO-LEGOFriendsCafeHeartlakeCity2.jpg',
                ]

                await bot.sendMessage(chatId5, arrGamesAndPuzzlesText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts5.length; i++) {

                    const product5 = categoryProducts5[i];

                    const text5 = `üåà<b>${product5.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product5.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product5.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product5.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product5.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product5.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product5.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product5.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product5.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product5.rating;

                    const buttons5 = getProductButtons(product5);

                    const imgIndex = i % arrGamesAndPuzzlesImg.length;
                    const imgBoxIndex = i % arrGamesAndPuzzlesImgBox.length;

                    await bot.sendMediaGroup(chatId5, [
                        { type: 'photo', media: arrGamesAndPuzzlesImg[imgIndex] },
                        { type: 'photo', media: arrGamesAndPuzzlesImgBox[imgBoxIndex] },
                    ], { reply_markup: { inline_keyboard: buttons5 } });

                    await bot.sendMessage(chatId5, text5, { reply_markup: { inline_keyboard: buttons5 }, parse_mode: 'HTML' });
                }

                break

            case 'üö¥–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏ü§æ‚Äç‚ôÄÔ∏è':
                const chatId6 = msg.chat.id;
                const categoryId6 = 6;
                const categoryProducts6 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId6}`);

                const arrActiveGamesText = 'üö¥<b>–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏ü§æ‚Äç‚ôÄÔ∏è —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrActiveGamesImg = [
                    './src/img/product/activeGames/Strider-Bicycle.jpg',
                    './src/img/product/activeGames/Razor-Scooter.jpeg',
                    './src/img/product/activeGames/Rollerblade-Rollers.jpg',
                    './src/img/product/activeGames/Adidas-Ball.jpg',
                    './src/img/product/activeGames/SportBaby-SportsComplex.jpg',
                ]

                await bot.sendMessage(chatId6, arrActiveGamesText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts6.length; i++) {

                    const product6 = categoryProducts6[i];

                    const text6 = `üåà<b>${product6.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product6.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product6.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product6.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product6.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product6.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product6.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product6.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product6.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product6.rating;

                    const buttons6 = getProductButtons(product6);

                    const imgIndex = i % arrActiveGamesImg.length;

                    await bot.sendMediaGroup(chatId6, [
                        { type: 'photo', media: arrActiveGamesImg[imgIndex] },
                    ], { reply_markup: { inline_keyboard: buttons6 } });

                    await bot.sendMessage(chatId6, text6, { reply_markup: { inline_keyboard: buttons6 }, parse_mode: 'HTML' });
                }

                break

            case 'üß†–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏üé®':
                const chatId7 = msg.chat.id;
                const categoryId7 = 7;
                const categoryProducts7 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId7}`);

                const arrDevelopmentalGamesText = 'üß†<b>–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏üé® —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrDevelopmentalGamesImg = [
                    './src/img/product/developmentalGames/LEGOGroup-DevelopmentConstructorLEGODuplo.jpg',
                    './src/img/product/developmentalGames/Ravensburger-EarningGameLogicCube.jpg',
                    './src/img/product/developmentalGames/Hasbro-PlayDohCreationKit.jpg', //TODO: –†–∞–∑–º–µ—Ä –Ω–µ —Ç–∞–∫–æ–π –∫–∞–∫–æ–π –Ω–∞–¥–æ
                    './src/img/product/developmentalGames/Melissa&Doug-LearningGameLettersAndNumbers.jpg',
                    './src/img/product/developmentalGames/DiscoveryKids-DiscoveryKidsNatureStudyKit.jpg',
                ]
                const arrDevelopmentalGamesImgBox = [
                    './src/img/product/developmentalGames/LEGOGroup-DevelopmentConstructorLEGODuplo2.jpg',
                    './src/img/product/developmentalGames/Ravensburger-EarningGameLogicCube2.jpg',
                    './src/img/product/developmentalGames/Hasbro-PlayDohCreationKit2.jpg', //TODO: –†–∞–∑–º–µ—Ä –Ω–µ —Ç–∞–∫–æ–π –∫–∞–∫–æ–π –Ω–∞–¥–æ
                    './src/img/product/developmentalGames/Melissa&Doug-LearningGameLettersAndNumbers2.jpg',
                    './src/img/product/developmentalGames/DiscoveryKids-DiscoveryKidsNatureStudyKit2.jpg',
                ]

                await bot.sendMessage(chatId7, arrDevelopmentalGamesText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts7.length; i++) {

                    const product7 = categoryProducts7[i];

                    const text7 = `üåà<b>${product7.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product7.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product7.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product7.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product7.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product7.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product7.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product7.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product7.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product7.rating;

                    const buttons7 = getProductButtons(product7);

                    const imgIndex = i % arrDevelopmentalGamesImg.length;
                    const imgBoxIndex = i % arrDevelopmentalGamesImgBox.length;

                    await bot.sendMediaGroup(chatId7, [
                        { type: 'photo', media: arrDevelopmentalGamesImg[imgIndex] },
                        { type: 'photo', media: arrDevelopmentalGamesImgBox[imgBoxIndex] },
                    ], { reply_markup: { inline_keyboard: buttons7 } });

                    await bot.sendMessage(chatId7, text7, { reply_markup: { inline_keyboard: buttons7 }, parse_mode: 'HTML' });
                }

                break

            case 'üõçÔ∏è–ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏üõçÔ∏è':
                const chatId8 = msg.chat.id;
                const categoryId8 = 8;
                const categoryProducts8 = products.filter(p => p.category === `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId8}`);

                const arrAccessoriesAdditionalProductsText = 'üõçÔ∏è<b>–ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏üõçÔ∏è —á—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä!</b>\n\n' +
                    'üåà–û—Å—å –ê–∫—Å–µ—Å—É–∞—Ä–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñüß∏:'
                const arrAccessoriesAdditionalProductsImg = [
                    './src/img/product/accessoriesAdditionalPproducts/SkipHop-PuzzleMat.jpg',
                    './src/img/product/accessoriesAdditionalPproducts/Decowall-WallDecorationFairyTaleForest.jpg',
                    './src/img/product/accessoriesAdditionalPproducts/IKEA-ToyBasket.jpg',
                    './src/img/product/accessoriesAdditionalPproducts/Step2-TableChair.jpg',
                    './src/img/product/accessoriesAdditionalPproducts/CloudB-StarrySkyNightLamp.jpg',
                ]

                await bot.sendMessage(chatId8, arrAccessoriesAdditionalProductsText, { parse_mode: 'HTML' });

                for (let i = 0; i < categoryProducts8.length; i++) {

                    const product8 = categoryProducts8[i];

                    const text8 = `üåà<b>${product8.name}</b>üß∏` + '\n\n' +
                        'üí¨<b>–û–ø–∏—Å:</b> ' + product8.description + '\n\n' +
                        'üí≠<b>–î–æ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ' + product8.additionalProperties + '\n\n' +
                        '<b>–¶—ñ–Ω–∞:</b> ' + product8.price + ' –≥—Ä–Ω' + '\n\n' +
                        '<b>–ù–∞—è–≤–Ω—ñ—Å—Ç—å:</b> ' + product8.availability + '\n\n' +
                        '<b>–í–∏—Ä–æ–±–Ω–∏–∫:</b> ' + product8.manufacturer + '\n' +
                        '<b>–†–æ–∑–º—ñ—Ä:</b> ' + product8.size + '\n' +
                        '<b>–í–∞–≥–∞:</b> ' + product8.weight + '\n\n' +
                        'üß∏<b>–°–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ—Ç—è–º:</b> ' + product8.kidsLike + '\n\n' +
                        '<b>–†–µ–π—Ç–∏–Ω–≥:</b> ' + product8.rating;

                    const buttons8 = getProductButtons(product8);

                    const imgIndex = i % arrAccessoriesAdditionalProductsImg.length;

                    await bot.sendMediaGroup(chatId8, [
                        { type: 'photo', media: arrAccessoriesAdditionalProductsImg[imgIndex] },
                    ], { reply_markup: { inline_keyboard: buttons8 } });

                    await bot.sendMessage(chatId8, text8, { reply_markup: { inline_keyboard: buttons8 }, parse_mode: 'HTML' });
                }

                break

            case 'üõí–ú—ñ–π –∫–æ—à–∏–∫ —Ç–æ–≤–∞—Ä—ñ–≤üõí':
                const chatId = msg.chat.id;

                let cartText = 'üåà<b>–û—Å—å –≤–∞—à –∫–æ—à–∏–∫</b>üß∏:\n\n';
                if (cart.length > 0) {
                    for (const item of cart) {
                        cartText += `${item.name} - ${item.price} –≥—Ä–Ω\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity} —à—Ç.\n\n`;
                    }
                    await bot.sendMessage(chatId, cartText, { ...getNumEmailInlineKeyboard(), parse_mode: 'HTML' });
                } else {
                    await bot.sendMessage(chatId, `${cartText} –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π`, { parse_mode: 'HTML' });
                }

                break;

            default:
                if (msg.text !== '/start' && msg.text !== '/my_cart') {

                    // bot.sendMessage(chatId, 'üåà<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤</b>üß∏', { ...getCategoryInlineKeyboard(), parse_mode: 'HTML' })
                }
                break;
        }
    })

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        function isValidEmail(email) {
            const re = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
            return re.test(String(email).toLowerCase());
        }

        function isValidPhone(phone) {
            const re = /^\+?[\d()-]{10,15}$/;
            return re.test(phone);
        }

        if (isWaitingForContacts) {

            if (isValidEmail(text) || isValidPhone(text)) {

                await bot.sendMessage(chatId, '‚úÖ–î—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É, –∂–¥—ñ—Ç—å –¥–∑–≤—ñ–Ω–∫–∞ –∞–±–æ —Å–º—Å', { ...getReturnInlineKeyboard(), parse_mode: 'HTML' });

                const user_data_file = 'user_data_file.txt'

                const userData =
                    `First name: ${msg.from.first_name}\n` +
                    ` Last name: ${msg.from.last_name}\n` +
                    `  Username: @${msg.from.username}\n` +
                    `     Wrote: ${msg.text}\n\n`;

                fs.appendFile(user_data_file, userData, (err) => {
                    if (err) {
                        console.log('‚úÖ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª ‚úÖ: '.bold.green, err)
                    } else {
                        console.log('‚úÖ –£–°–ï –ó–ê–ü–ò–°–ê–õ–û–°–Ø ‚úÖ'.bold.green)
                    }
                })

                isWaitingForContacts = false;
                cart = [];

            } else {

                await bot.sendMessage(chatId, '<b>–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ</b>üò¢\n\n' +
                    '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚úâÔ∏è<b>Email</b>‚úâÔ∏è –∞–±–æ üìû<b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>üìû —Ç–µ–ª–µ—Ñ–æ–Ω—É.', { parse_mode: 'HTML' });
            }
        }

    });

    bot.on('polling_error', (error) => {
        console.error('Polling error:', error);
    });

};

start();